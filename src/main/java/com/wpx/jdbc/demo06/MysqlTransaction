事务:
	事务就是一个事情，组成这个事情可能有多个单元，要求这些单元，要么全都成功，要么全都不成功。
	在开发中，有事务的存在，可以保证数据完整性。

例子:转账   A-10  exception	B+10  
	会导致A账号减少10元,而B没有收到10元,事务即A-10 and B+10 ,否则回滚,即历史回退到出问题前,再来一次

mysql下的事务操作
	start transaction  开启事务
	rollback 事务回滚
	commit 事务提交 

在mysql中autocommit=on oracle中为off,即mysql默认不开启事务,oracle中默认开启事务
mysql 修改方式
	查看:SHOW VARIABLES LIKE '%commit%'
	修改:SET autocommit =off

事务特性(ACID)

原子性（Atomicity）
原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。 
一致性（Consistency）
事务前后数据的完整性必须保持一致。
隔离性（Isolation）
事务的隔离性是指多个用户并发访问数据库时，一个用户的事务不能被其它用户的事务所干扰，多个并发事务之间数据要相互隔离。
持久性（Durability）
持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响。

事务的隔离级别

	1 Serializable：可避免脏读、不可重复读、虚读情况的发生。（串行化）
	2 Repeatable read：可避免脏读、不可重复读情况的发生。（可重复读）不可以避免虚读
	3 Read committed：可避免脏读情况发生（读已提交）
	4 Read uncommitted：最低级别，以上情况均无法保证。(读未提交)

查看当前事务隔离级别

	SELECT @@tx_isolation
	
脏读:一个事务读取到另一个事务为提交数据
不可重复读:两次读取数据不一致(读提交数据)---update
虚读:两次读取数据不一致(读提交数据)----insert

事务隔离级别:
	read uncommitted 什么问题也解决不了.
	read committed 可以解决脏读，其它解决不了.
	Repeatable read 可以解决脏读，可以解决不可重复读,不能解决虚读.
	Serializable 它会锁表，可以解决所有问题.

	安全性：serializable > repeatable read > read committed > read uncommitted 
	性能 ：serializable < repeatable read < read committed < read uncommitted 

	结论： 实际开发中，通常不会选择 serializable 和 read uncommitted ，
	mysql默认隔离级别 repeatable read ，oracle默认隔离级别 read committed

解决丢失更新问题:
1.悲观锁
	悲观锁 （假设丢失更新一定会发生 ） ----- 利用数据库内部锁机制，管理事务	
	提供锁:
		1.共享锁
			select * from table lock in share mode;(读锁,共享锁)
		2.排他锁
			select * from table for update;(写锁,排他锁)
2.乐观锁
	乐观锁 （假设丢失更新不会发生）------- 采用程序中添加版本字段解决丢失更新问题
		在数据表添加版本字段，每次修改过记录后，版本字段都会更新，如果读取是版本字段，
		与修改时版本字段不一致，说明别人进行修改过数据
		
		
连接池:		
		
C3P0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。
目前使用它的开源项目有Hibernate，Spring等。
c3p0与dbcp区别

dbcp没有自动回收空闲连接的功能

c3p0有自动回收空闲连接功能

c3p0连接池使用
	1.导包
		c3p0-0.9.1.2.jar
		
	使用
		1.手动
			ComboPooledDataSource cpds = new ComboPooledDataSource();
			cpds.setDriverClass("com.mysql.jdbc.Driver");
			cpds.setJdbcUrl("jdbc:mysql:///day18");
			cpds.setUser("root");
			cpds.setPassword("abc");
			
		2.自动(使用配置文件)
			
			c3p0的配置文件可以是properties也可以是xml.
			
			c3p0的配置文件如果名称叫做 c3p0.properties or c3p0-config.xml 并且放置在classpath路径下(对于web应用就是classes目录)
			那么c3p0会自动查找。
			
			注意：我们其时只需要将配置文件放置在src下就可以。
					
					使用：
						ComboPooledDataSource cpds = new ComboPooledDataSource();
						它会在指定的目录下查找指定名称的配置文件，并将其中内容加载。